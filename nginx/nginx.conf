events {
    worker_connections 1024;
}

http {
    # Logging format with timestamp and path
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'upstream_addr="$upstream_addr" '
                   'upstream_response_time="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Upstream servers
    upstream service1 {
        server service1:8001;
    }

    upstream service2 {
        server service2:8002;
    }

    server {
        listen 80;
        server_name localhost;

        # Health check endpoint for nginx itself
        location /health {
            access_log off;
            return 200 "nginx healthy\n";
            add_header Content-Type text/plain;
        }

        # Route to Service 1 (Go service)
        location /service1 {
            # Remove /service1 prefix before forwarding
            rewrite ^/service1/?(.*) /$1 break;
            
            proxy_pass http://service1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Health check
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        }

        # Route to Service 2 (Python Flask service)
        location /service2 {
            # Remove /service2 prefix before forwarding
            rewrite ^/service2/?(.*) /$1 break;
            
            proxy_pass http://service2;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Health check
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        }

        # Default route - API status
        location / {
            return 200 '{"status": "ok", "message": "API Gateway running", "routes": ["/service1", "/service2"], "health": "/health"}\n';
            add_header Content-Type application/json;
        }

        # Handle 404s
        error_page 404 = @not_found;
        location @not_found {
            return 404 '{"error": "Not Found", "message": "Available routes: /service1, /service2"}\n';
            add_header Content-Type application/json;
        }
    }
}
